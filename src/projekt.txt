41 создание своего пайпа
аналогично как раньше экспорт класс декаратор пайп с обязат полем name: 'mult' регистрац в модуле
далее создаем интерфейс имплеминтируясь от
export class MBPipe implements PipeTransform {
transform(numm: number, par: number): number {
return  numm * par
в шаблоне выводим <p>{{ 10 | mult }}</p>


40 еще пайпы
currency   приводит к валюте
percent    приводит %  тут применимы параметры свойственые наберу
json -     дает нужный формат объекта


39 пайпы для даты
date: Date = new Date()  пер date с типом Date из конструктора new Date()
<p>{{date | date: 'fullDate'}}</p>  более локоничное отображение
можно достать любое из докум на сайте ангуляра


38 поиск пайпов в документации ангуляр=> doc => api далее фильтруем


37 Пайпы для строк<p>
{{per | uppercase }}</p>
uppercase     к верхнему регистру
lowercase     к нижнему регистру
titlecase     каждое слово с большой буквы
slice:1:3     вырезает 1 символ  второе значение вырезает все после 3 символа
при  отрицательном 2ом значение срезает значения с конца


36 пайпы для числа
пайп это трансформеры меняющие отображение данных  это вертик черта
ts заводим  e: number = Math.E
в шаблоне {{e | number - округляет цифры поле запятой до 3
чтоб передать параметр в пайп ставим (:) number:'2.3'
1ое значение цифры до запятой
2ое диапозон 1-5 после запятой

35 Структурная директива меняет значение кода... на примере кнопки скрывающий текст
в шаблоне заводим див с классом и задаем ему стили...
в  тс компанента завел    perFlag = true ...
в шаблоне написал         <div *ngIf = perFlag...
создал кнопку по клику меняющ значен (click)="perFlag = !perFlag"

как ангуляр перестраивает код... он обарачивает div в ng-template
 указывает директиву *ngIf  как бандинг  <ng-template [ngIf]="flag">


создал новую директиву с cli и в конструкторе завожу 2 перемен    private perTem: TemplateRef<any>,
                                                                  private perView: ViewContainerRef)

в шаблоне копирую логику и меняю  <div  class="wrap" *perAppNd ="!perFlag">
//perAppNd равна названию селектора директивы и в @Input() тоже ставим ее
Принимаю параметр @Input() set perAppNd (perCond: boolean) {
                      if (!perCond) {
                        this.perView.createEmbeddedView(this.perTem)
                    //    показать
                      } else {
                      //  скрыть
                        this.perView.clear()
                      }
                    }


34 декаратор @HostBinding('style color') perColor = null    упращает позволяет менять любой стиль
в @HostListener('mouseenter') onEnter () { this.perColor = this.color}


33 Передача параметров в дерективу
в шаблоне <p appStyle = "red" Fontsize="50px">Lorem</p>   через пробел следущее св во
в тс дир   @Input('appStyle') color: string = 'blue'
           @Input (selector)  или сюда Fontsize = '15px'
далее в @ Hostlictner  прописываем стиль и this.св-во

меняем цвет и жирность
      Через пробел добавляем св во fontWeight="bold"
      в тс  @Input() fontWeight = 'normal'
      this.per2.setStyle(this.per1.nativeElement, 'fontWeight', this.fontWeight)

Как передать объект ?
     если мы передаем в значении строку то не обязательно ее бандить [ ]
     Объект пишиться в “{}“ скобках и его надо бандить []
в шаблоне св во     [perin]=“{}“
     в дерективе принимаем
     @Input () perin: сИнтерфейсом {border?: sting, fontweight?: string, borderRadius?: string}
      теперь передаем их в шаблон
      [perin]=“{border: '1px solid blue', borderRadius: '5px' }“
                       теперь мы имеем к нему доступ через  this.
В @Hostlistner{
this.per2.setStyle(this.per1.nativeElement, 'border', this.per.border);}


32 добавляем события   @HostListener-
     это декаратор куда мы передаем название события котор хотим слушать
     например клик  и вотор параметр [„$event“]
     с методом  metod: и типом Event
@HostListener('click', ['$event.target']) metod(tip: Event) {
   при клике в консоле можно увидеть маус евент с полями как в нативном евенте…
   если Добав к $event.  target то получем информ в консое с описанием параграфа и стилей
   this.per2.setStyle(this.per.nativeElement, 'color', 'blue')
Меняем цвет при наведении мыши
   @HostListener (“mouseenter“) metod(){this.per2.setStyle(per2.nativElement,
   вторым указ название стиля котор будем менять , 'color' , 3ee на какое значение меняем
@HostListener (“mouseleave“) metodleave(){
   this.per2.setStyle(per2.nativElement, 'color', null
}

31 Получение доступа до элемента
нужно реализовать конструктор и в него иньекцию...
создаем per и инжектируем нов перемен типа элемент реф...
constructor(private per: ElementRef,) {}
в консоле видно поле натив элемент и у него дом нода и параграф выбран …
это дает доступ до элемента …
теперь можно его использовать обращаясь к полю натив элемент
per.nativElement.style.color = „red“

чтоб код был более защищен … инъектируем private per2 с типом Rendorer2   this per2.
Смотрим методы какие есть
this.per2.setStyle(this.per.nativeElement, 'color', 'blue')
вторым указ название стиля котор будем менять , color ,
3ee на какое значение меняем


30 Директивы это сущности помогающие менят  html
export class затем добав @Directive({selector: '[appStyle]'}) с одним обязательным св вом селектор
чтоб ее использовать нужно вставить ее в тег перед закрытием>

29 Стили с ViewEncapsulation с помощью добавления в декоратор можно глабально менять стили

28 Change Detection Strategy   меняем имя
ngOnInit(): void {
    setTimeout(() => {
      this.massiv[0].name = 'zam'
    }, 3000)
  }

27 см после 23
Жизненный цикл (lifecycle hooks)  что делают подробно описанно на сайте ангуляр

26 Доступ до контента например div#per с помощью декоратора
 @ContentChild(здесь пишим без # 'per') perElRef: ElementRef

25 Передача в компонент
например указыв длинное или короткое имя
<app-spis *ngFor="let per of massiv" [nuwPer]="per">
    <small *ngIf="per.name.length > 10; else short"> длинное Имя </small>
    <ng-template #short>
        <small > короткое имя</small>
    </ng-template>
</app-spis>
<ng-content></ng-content> туда где будем показывать


24 Доступ до html элементов  создаем кнопку с фокусом на фамилию..
 ссылку в элемент котор выделяем с любм именем  #имя
 добавить декаратор @ViewChild(“имя“ без# ) anyPerem: ElementRef
в методе пишим this.anyPerem.nativElement.focus()

23 передача параметров из компанента - оживляем форму ..
при нажатии кнопки очищаем форму добавляем новый спис..
в форме добавляем 2 перем  как и в app comp...
В шаблоне добавляем [(ngModel)]="name"
далее описываем метод клик В процессе добавляем @output
и обращаясь к пер output   отправляем перем созданую в методе const perAddm
принимаем ее в шаблоне app compon  добавл в () = тут нов метод котор создаем в тс ап комп

27  ngOnDestroy удоление компанента
в spis компонент тс добавляем ngOnDestroy(): void   имплементируясь от него
создаем кнопку для удаления в шаблоне
ts созд @Output perOutRem = new Event Emitter<any>
и в методе this perOutRem.emit (this.perSpis.surname) отправляем...
принимаем в шаблоне главн комп  (perOutRem) = " delite($event)"  создаем мет в тс главн ап к
this.massiv = this.massiv.filter(perfor => perfor.surname !== surname )

22 Передаем параметры
перенес массив в app ts компанент
в тс списка написал @Input() perSpis: Spis
в шаблоне главн комп-та вывел ngFor и пер инпута = перем ngFor  [perSpis]="perfor"
в шаблоне списка через интерпаляцию вывел {{perSpis.name}}

21  Создаем компаненты.. 2 нов комп которые будут отвечать за шаблон и за список
выводим их в главный компонент...
заводим инетерфейс массива и описываем его ниже после чего выводим в шаблон
В шаблоне отрисовываем как будут выглядеть
Как описать типы будущих массивов?
нужно прописать export interfece Name перед декаратором с элементами массива {}


20 Pipe - трансформеры меняющие написание
Заводим в тс perem : Date = nuw Date ()
 в шаблоне выводим ее <p>{{perem | date : 'long' | uppercase | lowercase}}</p>


19 ngFor
Заводим в тс perem = масиив [1,3,12...] из чисел строк и тп...
  в щаблоне *ngFor =“let NuwPerem of perem; let idx = index“  нумерует что есть с 0
     {{idx))    {{NuwPerem}}
чтоб вывести объект
per = [{f: '', name: ''}] <li *ngFor let Np of per > <p>{{Np.f}} </p><p>{{Np.name}}


18 ngSwitch
заводим в тс perem: any = folse
в шаблоне button  котор по клику будет менять perem на противоположное(!) = !perem

<button (click) = perem = !perem>
<button (click)="perem = 111">
<div [ngSwitch] ="perem">
    <p *ngSwitchCase ="true" class = "red"> any text </p>
    <p *ngSwitchCase ="false" class = "blue">  any text2222222 </p>
    <p *ngSwitchDefault>    danger      </p>
</div>

17 ngIf  показать одно или другое...
заводим перем в тс perem = folse
в шаблоне button  котор по клику будет менять perem на противоположн !perem  тру или фолз
<p  *ngIf =“perem; else novPerem“   class =“red“>
<ng-template #novPerem >    внутрь этого контейнера ...то что нужно показать вместо perem
</ng-template> это контейнер

16 ngClass  ПЕРЕКЛЮЧАЕТ класс
например в css заводим 2 стиля red и blue
в tc переменную back
в шаблоне прописываем например <p [ngClass]="{red: back, blue: !back }" текст </p>


15 Директивы это вспомагательные атрибуты помогающ управлять html

ngStyle - отвечает за стили можно прописать
в шаблоне    <div>[ngStile]=“ {стили}“</div>

например: ПЕРЕКЛЮЧАТЕЛЬ

заводим 'per = folse'     в ts ...а  в шаблоне кнопку где внутри пишем ...'per = !per'
и например меняем background
background: per ? 'red' : 'blue'



14 2 Way Binding - это 2х сторонее связывание возможно только
с использованием FormsModule
чтоб связать полле ввода с выводом в строку ниже достаточно в
imput добывить [(ngModel)]="nuwPer"
и завести  nuwPer в тс и вывести ее в шаблон через интерполяцию

13 Как по кнопке обработать то что написано в input?
Создаем кнопку с методом (click) = metod() описываем в тс  и в консоле проверяем

Как обработать событие по нажатию enter ?
нужно в шаблоне событие (input)  заменить на (keyup.enter)

13 Event байндинг - это связывание из ts в html в () скобках...
Как вводя данные в окно отобразить их ниже в строке?
добавляем в метод (input)="listening($event)" метод котор создаем в ts
и перемен которую выводим в шаблоне приравневаем к значению target value
    "this.pertext = event.target.value"

input + tab  сделает окно для ввода текста
'{{pertext}}'  выведет перем котор создал в ts

event - это событие которое отображаеться в javascript при вводе в окно инпута...
в консоле можно увидеть что такое event ... это дерево с разными полями , где в поле
target value лежит то что прописываем в окно ввода!!!

нативный $event - это особенность ангуляр
в отличии от java нужно ставить $ в шаблоне в методе ($event)
чтобы достать событие target value


12 Байдинг - это связывание элементов  ts с шаблоном и обратно...

чтоб связать html c ts берем [] скобки
чтоб связать ts с html берем () скобки

Как показать фото с другого сайта? в ts заводим переменную в которую вставляем ссылку картинки.
в шаблоне в теге img бандим [src] = per

В каком теге выводим фото?       <img [src]="img" alt="">

Как задать размеры для фото?     width: ; height: ;

Как заменить ее на др через заданное время? Как пишеться функция timeout set interval..колбек?
...в конструкторе пишем setTimeout (() =>{this.перемен=“нов путь“}, 3000)


11 Интерполяция - это то что хотим показать в шаблоне в двойных фигурных скобках {{}}
Как это работает?  например: в ts заводим переменную 'per'
и далее после = пишем то что хотим показать...
в шаблоне например в теге <р></p>  выводим {{'per'}}
чтоб вывести объект его нужно привести к строке и обратиться к ключу через точку
например а:1  {{per.a}}   получим 1
чтоб завести строку {{'привет' + 'мир'}}

10 урок: создал фаил со стилями и немного отредактировал стиль.

8 и 9 урок: создал 2 новых компанента один руками ... второй автоматически с ng cli
